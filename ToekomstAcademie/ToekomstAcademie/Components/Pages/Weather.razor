@page "/weather"
@inject WeatherService WeatherService
@implements IDisposable
@using System.Threading
@using ToekomstAcademie.Models
@using ToekomstAcademie.Services
<PageTitle>Weer</PageTitle>

<div class="weather-container">
    <div class="weather-header">
        <h1>Weer Dashboard</h1>
        <div class="location-selector">
            <input @bind="location" placeholder="Voer locatie in" />
            <button @onclick="UpdateWeather" class="btn btn-primary">Bijwerken</button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Weerdata ophalen...</p>
        </div>
    }
    else if (weatherData != null)
    {
        <div class="current-weather">
            <div class="main-info">
                <h2>@weatherData.Location</h2>
                <div class="temperature">
                    <span class="current-temp">@weatherData.CurrentTemp°C</span>
                    <span class="feels-like">Voelt als @weatherData.FeelsLike°C</span>
                </div>
                <div class="conditions">
                    <img src="@GetWeatherIcon(weatherData.WeatherCondition)" alt="@weatherData.WeatherCondition" />
                    <span>@weatherData.WeatherCondition</span>
                </div>
            </div>

            <div class="weather-details">
                <div class="detail-card">
                    <i class="fas fa-wind"></i>
                    <span>Wind</span>
                    <span>@weatherData.WindSpeed km/u</span>
                </div>
                <div class="detail-card">
                    <i class="fas fa-tint"></i>
                    <span>Vochtigheid</span>
                    <span>@weatherData.Humidity%</span>
                </div>
                <div class="detail-card">
                    <i class="fas fa-cloud-rain"></i>
                    <span>Neerslag</span>
                    <span>@weatherData.Precipitation mm</span>
                </div>
                <div class="detail-card">
                    <i class="fas fa-sun"></i>
                    <span>UV Index</span>
                    <span>@weatherData.UVIndex</span>
                </div>
            </div>
        </div>

        <div class="hourly-forecast">
            <h3>Uurlijkse Voorspelling</h3>
            <div class="hourly-scroll">
                @foreach (var hour in weatherData.HourlyForecast)
                {
                    <div class="hour-card">
                        <span>@hour.Time.ToString("HH:mm")</span>
                        <img src="@GetWeatherIcon(hour.Condition)" alt="@hour.Condition" />
                        <span>@hour.Temperature°C</span>
                    </div>
                }
            </div>
        </div>

        <div class="daily-forecast">
            <h3>5-daagse Voorspelling</h3>
            @foreach (var day in weatherData.DailyForecast)
            {
                <div class="day-card">
                    <span>@day.Date.ToString("dddd")</span>
                    <div class="day-temps">
                        <span>@day.MaxTemp°C</span>
                        <span class="min-temp">@day.MinTemp°C</span>
                    </div>
                    <img src="@GetWeatherIcon(day.Condition)" alt="@day.Condition" />
                    <span>@day.Condition</span>
                </div>
            }
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="error-message">
            <i class="fas fa-exclamation-triangle"></i>
            <p>@errorMessage</p>
            <button @onclick="RetryLoadWeather" class="btn btn-secondary">Probeer opnieuw</button>
        </div>
    }
</div>

@code {
    private WeatherData weatherData;
    private string location = "Amsterdam";
    private bool isLoading = true;
    private string errorMessage;
    private Timer autoRefreshTimer;

 protected override async Task OnInitializedAsync()
{
    await LoadWeatherData();
    autoRefreshTimer = new Timer(async _ => await LoadWeatherData(), null, 
                               TimeSpan.FromMinutes(10), TimeSpan.FromMinutes(10));
}

private async Task LoadWeatherData()
{
    try
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        weatherData = await WeatherService.GetWeatherDataAsync(location);
    }
    catch (HttpRequestException ex)
    {
        errorMessage = $"API fout: {ex.StatusCode} - {ex.Message}";
    }
    catch (Exception ex)
    {
        errorMessage = $"Fout: {ex.Message}";
    }
    finally
    {
        isLoading = false;
        StateHasChanged();
    }
}

    private async Task UpdateWeather()
    {
        await LoadWeatherData();
    }

    private async Task RetryLoadWeather()
    {
        await LoadWeatherData();
    }

    private string GetWeatherIcon(string condition)
    {
        return condition switch
        {
            "Zonnig" => "/images/weather/sunny.png",
            "Bewolkt" => "/images/weather/cloudy.png",
            "Regen" => "/images/weather/rain.png",
            "Sneeuw" => "/images/weather/snow.png",
            "Onweer" => "/images/weather/thunderstorm.png",
            "Mist" => "/images/weather/fog.png",
            _ => "/images/weather/partly-cloudy.png"
        };
    }

    public void Dispose()
    {
        autoRefreshTimer?.Dispose();
    }
}