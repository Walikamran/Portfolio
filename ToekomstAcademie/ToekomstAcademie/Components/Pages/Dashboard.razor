@page "/dashboard"
@using ToekomstAcademie.Models
@inject ToekomstAcademie.Services.TaskService TaskService

<h1>🛠️ Onderhoud & Taakbeheer</h1>

<div class="dashboard">
    <div class="task-column">
        <h2>📋 Te Doen</h2>
        @foreach (var task in Tasks.Where(t => t.Status == "ToDo"))
        {
            <TaskCard Task="task" OnStatusChanged="UpdateTaskStatus" OnDelete="DeleteTask" />
        }
    </div>

    <div class="task-column">
        <h2>⚙️ Bezig</h2>
        @foreach (var task in Tasks.Where(t => t.Status == "InProgress"))
        {
            <TaskCard Task="task" OnStatusChanged="UpdateTaskStatus" OnDelete="DeleteTask" />
        }
    </div>

    <div class="task-column">
        <h2>✅ Voltooid</h2>
        @foreach (var task in Tasks.Where(t => t.Status == "Done"))
        {
            <TaskCard Task="task" OnStatusChanged="UpdateTaskStatus" OnDelete="DeleteTask" />
        }
    </div>
</div>

<AddTaskForm OnTaskAdded="AddNewTask" />

@code {
    private List<MaintenanceTask> Tasks = new();

    protected override async Task OnInitializedAsync()
    {
        Tasks = await TaskService.GetTasksAsync();
    }

    private async Task UpdateTaskStatus((MaintenanceTask, string) update)
    {
        var (task, newStatus) = update;
        task.Status = newStatus;
        await TaskService.UpdateTaskAsync(task);
        Tasks = await TaskService.GetTasksAsync();
    }

    private async Task DeleteTask(MaintenanceTask task)
    {
        await TaskService.DeleteTaskAsync(task.Id);
        Tasks = await TaskService.GetTasksAsync();
    }

    private async Task AddNewTask(MaintenanceTask newTask)
    {
        await TaskService.AddTaskAsync(newTask);
        Tasks = await TaskService.GetTasksAsync();
    }
}
